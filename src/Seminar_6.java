import java.util.*;
import java.util.HashSet;

public class Seminar_6 {
    public static void main(String[] args) {
        //task0();
        //task1(createArray(1000, 0, 24));
        Cat cat1 = new Cat("–ú—É—Ä–∑–∏–∫", "–ü–µ—Ä—Å–∏–¥—Å–∫–∞—è", 8, "–ò–≥–æ—Ä—å –ü—É–ø–∫–∏–Ω"); //—Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ—à–∫—É, –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞
        Cat cat2 = new Cat("–ë–∞—Ä—Å–∏–∫", "–ú–µ–π–Ω–∫—É–Ω", 5, "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á");
        Cat cat3 = new Cat("–ú—É—Ä–∑–∏–∫", "–ü–µ—Ä—Å–∏–¥—Å–∫–∞—è", 8, "–ò–≥–æ—Ä—å –ü—É–ø–∫–∏–Ω");

        Set<Cat> cats = new HashSet<>();
        cats.add(cat1);
        cats.add(cat2);
        cats.add(cat3);
        System.out.println(cat1.equals(cat3));

        System.out.println(cats);

    }

    static void task0(){
    /*
üìî 1. –°–æ–∑–¥–∞–π—Ç–µ HashSet, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —á–∏—Å–ª–∞–º–∏: {1, 2, 3, 2, 4, 5, 6, 3}.
      –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.
   2. –°–æ–∑–¥–∞–π—Ç–µ LinkedHashSet, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —á–∏—Å–ª–∞–º–∏: {1, 2, 3, 2, 4, 5, 6, 3}.
      –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.
   3. –°–æ–∑–¥–∞–π—Ç–µ TreeSet, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —á–∏—Å–ª–∞–º–∏: {1, 2, 3, 2, 4, 5, 6, 3}.
      –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.

      Set - –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Map, –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏ –∑–∞–≥–ª—É—à–∫–∏(–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã).
       HashSet —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ö—ç—à —Ñ—É–Ω–∫—Ü–∏–∏, TreeSet - —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ,
       LinkedHashSet - –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
*/      Integer[] arr = new Integer[]{1, 8, 3, 7, 4, 5, 6, 9};
        Set<Integer> set1 = new HashSet<>(Arrays.asList(arr)); // —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ Arrays.asList(arr)
        Set<Integer> set2 = new LinkedHashSet<>(Arrays.asList(arr));
        Set<Integer> set3 = new TreeSet<>(Arrays.asList(arr));

        System.out.println(set1);
        System.out.println(set2);
        System.out.println(set3);

    }

    static void task1(Integer[] arr){
       /*
       1. –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω–∏—Ç –º–∞—Å—Å–∏–≤ –∏–∑ 1000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 0 –¥–æ 24.
       2. –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –≤—ã—à–µ –º–∞—Å—Å–∏–≤ –∏ —Å –ø–æ–º–æ—â—å—é Set –≤—ã—á–∏—Å–ª–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
       –∑–Ω–∞—á–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –∏ –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π.
        –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É–ª—É:
        –ø—Ä–æ—Ü–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª * 100 / –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –≤ –º–∞—Å—Å–∏–≤–µ.*/

        Set <Integer> set = new HashSet<>(Arrays.asList(arr));
        double procent = (set.size() * 100.0)/ arr.length;
        System.out.println(procent);


    }

    static Integer[] createArray(int size, int min, int max){  //–º–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
        Integer[] arr = new Integer[size];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = (int) (Math.random() * (max - min + 1) + min);
        }
        return arr;
    }

    static void task2(){
        /*
        1. –ü—Ä–æ–¥—É–º–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞—Å—Å–∞ –ö–æ—Ç. –ö–∞–∫–∏–µ –ø–æ–ª—è –∏ –º–µ—Ç–æ–¥—ã –±—É–¥—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è
        –∞) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∏–Ω–∏–∫–∏
        –±) –∞—Ä—Ö–∏–≤–æ–º –≤—ã—Å—Ç–∞–≤–∫–∏ –∫–æ—Ç–æ–≤
        –≤) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –¢–µ–∞—Ç—Ä–∞ –∫–æ—à–µ–∫ –Æ. –î. –ö—É–∫–ª–∞—á—ë–≤–∞
        –ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –≤ java.
         */
    }

    static void task3(){
        /*
        –°–æ–∑–¥–∞–π—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ Cat - HashSet<Cat>.
        1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ–≥–æ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤.
        2. –°–æ–∑–¥–∞–π—Ç–µ 2 –∏–ª–∏ –±–æ–ª–µ–µ –∫–æ—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ –ø–æ–ª—è—Ö. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –∏—Ö –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ.
        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ.
        3. –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥
        **public boolean**
        equals(Object o)
        –ü—Ä–æ–ø–∏—à–∏—Ç–µ –≤ –Ω—ë–º –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ—Ç–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Ö—Ä–∞–Ω–∏–º—ã–º –≤ –ø–æ–ª—è—Ö.
        –¢–æ –µ—Å—Ç—å, –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–≤–Ω—ã.
        4. –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥
        **public int hashCode()**
        –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å hash, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–µ–π –∫–ª–∞—Å—Å–∞ Cat. (–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Objects.hash(...))
        5. –í—ã–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑ –ø—É–Ω–∫—Ç–∞ 2, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–∏–ª–∏—Å—å.
         */
    }


}
